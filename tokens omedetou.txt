//tokens
START_PROGRAM   : "Start"
FINISH_PROGRAM  : "Finish"
VAR             : "var "
WHILE           : "while"
IF              : "if "
ELSE            : "else "
DEF             : "def"
RETURN          : "return"
CLASS           : "class"
EXTENDS         : "extends"
PRINT           : "print"

LEFT_CURRLY_BRACES      : /\{/
RIGHT_CURRLY_BRACES     : /\}/ 
LEFT_PARENTHESIS  : /\(/
RIGHT_PARENTHESIS : /\)/ 
LEFT_BRACKET : /\[/
RIGHT_BRACKET : /\]/

COMMA     :  /,/    
COLON     :  /:/  
DOT       :  /\./

NEW_LINE: /\n+/
WHITESPACE: (" " | /\t/ )+

GREATER_THAN      : />/
LESS_THAN         : /</
LESS_EQUAL        : /<=/
GREATER_EQUAL       : />=/
NOT_EQUAL         : /!=/
EQUAL_COMPARATION : /==/
EQUAL            : /=/
OR               : /\|/
AND              : /\&/

PLUS             : /\+/
MINUS            : /-/
ASTERISK         : /\*/

SLASH            : /\//

INT_WORD      : "int"
FLOAT_WORD     : "float"
BOOL_WORD      : "bool"
STRING_WORD    : "String"
 
IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/
CONST_INT: /\d+/
CONST_FLOAT: /\d+(\.\d+)?/
CONST_BOOL: /[a-zA-Z_][a-zA-Z0-9_]*/
CONST_STRING          : /".*"/


%ignore WHITESPACE
%ignore NEW_LINE

// rules
start: programa

programa : START_PROGRAM NEW_LINE programa2 FINISH_PROGRAM
programa2 : estatuto programa3 | class programa3
programa3 : programa2 | 

asignacion : IDENTIFIER asignacion2 EQUAL expresion NEW_LINE
asignacion2 : DOT IDENTIFIER | 

condicion  : IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque condicion2
condicion2 : ELSE bloque |  

bloque: LEFT_CURRLY_BRACES b1 RIGHT_CURRLY_BRACES
b1 : estatuto b1 | 

estatuto    : asignacion 
            | condicion 
            | escritura 
            | ciclo 
            | vars
            | function
            | function_call

tipo: INT_WORD
    | FLOAT_WORD 
    | STRING_WORD
    | BOOL_WORD

ciclo : WHILE LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS bloque

escritura : PRINT LEFT_PARENTHESIS expresion esc2 RIGHT_PARENTHESIS NEW_LINE
esc2: COMMA expresion esc2 | 

vars    : VAR vars2
vars2   : IDENTIFIER IDENTIFIER vars6 NEW_LINE| tipo vars3
vars3   : asignacion | IDENTIFIER vars4 NEW_LINE
vars4   : LEFT_BRACKET CONST_INT RIGHT_BRACKET vars5 | 
vars5   : LEFT_BRACKET CONST_INT RIGHT_BRACKET | 
vars6   : EQUAL expresion |

expresion   : exp expresion1
expresion1  : expresion2 exp | 
expresion2  : GREATER_THAN 
            | LESS_THAN 
            | EQUAL_COMPARATION 
            | NOT_EQUAL 
            | GREATER_EQUAL 
            | LESS_EQUAL
            | OR
            | AND

exp : termino ex1 
ex1 : ex2 exp | 
ex2 : PLUS | MINUS

factor  : factor1 | factor2
factor1 : LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
factor2 : factor3 factor4
factor3 : PLUS | MINUS | 
factor4 : var_cte | IDENTIFIER DOT IDENTIFIER

termino : factor t1
t1 : t2 termino | 
t2 : ASTERISK | SLASH

class : LESS_THAN CLASS GREATER_THAN class2 IDENTIFIER bloque
class2 : IDENTIFIER EXTENDS | 

function  : DEF IDENTIFIER LEFT_PARENTHESIS function1 RIGHT_PARENTHESIS LEFT_CURRLY_BRACES estatuto function2 RIGHT_CURRLY_BRACES 
function1 : var_cte function3 |
function2 : RETURN var_cte | 
function3 : COMMA var_cte function3 | 

function_call : IDENTIFIER fc1 LEFT_PARENTHESIS fc2 RIGHT_PARENTHESIS NEW_LINE
fc1 : DOT IDENTIFIER | 
fc2 : expresion fc3 | 
fc3 : COMMA expresion fc3 | 

var_cte : IDENTIFIER
        | CONST_INT 
        | CONST_FLOAT 
        | CONST_STRING
        | CONST_BOOL
        | function_call