//tokens
START_PROGRAM   : "Start"
FINISH_PROGRAM  : "Finish"
VAR             : "Var "
WHILE           : "While"
IF              : "If"
ELSE            : "Else "
DEF             : "Def"
RETURN          : "Return"
CLASS           : "Class"
EXTENDS         : "Extends"
PRINT           : "Print"

LEFT_CURRLY_BRACES      : /\{/
RIGHT_CURRLY_BRACES     : /\}/ 
LEFT_PARENTHESIS  : /\(/
RIGHT_PARENTHESIS : /\)/ 
LEFT_BRACKET : /\[/
RIGHT_BRACKET : /\]/

COMMA     :  /,/    
COLON     :  /:/  
DOT       :  /\./

NEW_LINE: /\n+/
WHITESPACE: (" " | /\t/ )+

GREATER_THAN      : />/
LESS_THAN         : /</
LESS_EQUAL        : /<=/
GREATER_EQUAL       : />=/
NOT_EQUAL         : /!=/
EQUAL_COMPARATION : /==/
EQUAL            : /=/
OR               : /\|/
AND              : /\&/

PLUS             : /\+/
MINUS            : /-/
ASTERISK         : /\*/

SLASH            : /\//

INT_WORD      : "int"
FLOAT_WORD     : "float"
BOOL_WORD      : "bool"
STRING_WORD    : "String"

IDENTIFIER: /[a-z_][a-zA-Z0-9_]*/
CONST_INT: /\d+/
CONST_FLOAT: /\d+(\.\d+)?/
CONST_BOOL: /True | False/ 
CONST_STRING          : STRING

COMMENT : /#.*/

%ignore WHITESPACE
%ignore NEW_LINE
%import common.ESCAPED_STRING   -> STRING
%import common.SIGNED_NUMBER    -> NUMBER
%import common.bool -> bool

// rules
start: programa

programa : START_PROGRAM NEW_LINE programa2 FINISH_PROGRAM
programa2 : class* estatuto* 

vars    : VAR varstype
varstype    :  tipo vars3 -> declaracion_normal
        //| IDENTIFIER IDENTIFIER NEW_LINE -> tipo_object
vars3   : asignacion -> asignar_var
        | IDENTIFIER varsarray? NEW_LINE  ->vars_sin_valor
varsarray   : LEFT_BRACKET CONST_INT RIGHT_BRACKET varsmatix? 
varsmatix   : LEFT_BRACKET CONST_INT RIGHT_BRACKET 

asignacion : IDENTIFIER asignacion_atributo? EQUAL expresion NEW_LINE
asignacion_atributo : DOT IDENTIFIER 

bloque: LEFT_CURRLY_BRACES b1? RIGHT_CURRLY_BRACES
b1 : estatuto b1*

estatuto    : asignacion -> igualar
        | condicion  -> unif
        | escritura  -> unprint
        | ciclo      -> unwhile
        | vars       -> unavars
        | function   -> unafuncion
        | exp -> operacion
        | function_call -> unallamadafuncion

escritura : PRINT LEFT_PARENTHESIS expresion esc2* RIGHT_PARENTHESIS NEW_LINE
esc2: COMMA expresion 

condicion  : IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS np_falsoif bloque  condicionelse? np_finif
np_falsoif : 
np_finif   :

condicionelse : np_inicioelse ELSE bloque
np_inicioelse : 

ciclo : WHILE np_iniciowhile LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS np_truewhile bloque np_endwhile NEW_LINE
np_iniciowhile  : 
np_truewhile    : 
np_endwhile     :


expresion   : exp+ expresion1?
expresion1  : expresion_comparacion exp+ np_comparacion np_comparacion_andor
expresion_comparacion  : GREATER_THAN -> np_meter_mayorque
        | LESS_THAN             -> np_meter_menorque
        | EQUAL_COMPARATION     -> np_meter_igual_igual
        | NOT_EQUAL             -> np_meter_no_igual
        | GREATER_EQUAL         -> np_meter_mayor_igual
        | LESS_EQUAL            -> np_meter_menor_igual
        | OR                    -> np_meter_or
        | AND                   -> np_meter_and
np_comparacion: 
np_comparacion_andor: 

exp : termino+ np_sumarnumeros exp_mas_menos? 
np_sumarnumeros: 
//ex1 : exp_mas_menos exp 
exp_mas_menos   : PLUS -> np_metermas
                | MINUS -> np_metermenos               

termino : factor np_multiplicarnumeros termino_por_entre?
np_multiplicarnumeros:
//t1 : termino_por_entre termino 
termino_por_entre   : ASTERISK  -> np_meterpor
                    | SLASH     -> np_meterentre

factor  : factor_fondofalso 
        | factor2
factor_fondofalso : LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS
factor2 :  factor_var

factor_var  : var_cte -> guardar_cte
        | IDENTIFIER DOT IDENTIFIER -> var_de_obj



class : LESS_THAN CLASS GREATER_THAN class_extended? IDENTIFIER bloque
class_extended : IDENTIFIER EXTENDS 

function  : DEF IDENTIFIER LEFT_PARENTHESIS function_param? RIGHT_PARENTHESIS LEFT_CURRLY_BRACES estatuto function_return? RIGHT_CURRLY_BRACES 
function_param : var_cte function_params*
function_return : RETURN var_cte 
function_params : COMMA var_cte 

function_call : IDENTIFIER fc_class? LEFT_PARENTHESIS fc_param? RIGHT_PARENTHESIS NEW_LINE
fc_class : DOT IDENTIFIER 
fc_param : expresion fc_params*
fc_params : COMMA expresion 

tipo: INT_WORD
| FLOAT_WORD 
| STRING_WORD
| BOOL_WORD

var_cte : IDENTIFIER    -> identificador
        | CONST_INT     -> entero
        | CONST_FLOAT   -> decimal
        | CONST_STRING  -> palabra
        | CONST_BOOL    -> booleano
        | function_call -> funcion