//tokens
START_PROGRAM   : "Start"
FINISH_PROGRAM  : "Finish"
VAR             : "Var"
WHILE           : "While"
IF              : "If"
ELSE            : "Else"
DEF             : "Def"
RETURN          : "Return"
CLASS           : "Class"
PRINT           : "Print"
MAIN            : "Main"
VOID            : "Void"
READ            : "Read"        

LEFT_CURRLY_BRACES      : /\{/
RIGHT_CURRLY_BRACES     : /\}/ 
LEFT_PARENTHESIS  : /\(/
RIGHT_PARENTHESIS : /\)/ 
LEFT_BRACKET : /\[/
RIGHT_BRACKET : /\]/

COMMA     :  /,/    
COLON     :  /:/  
DOT       :  /\./

NEW_LINE: /\n+/
WHITESPACE: (" " | /\t/ )+

GREATER_THAN      : />/
LESS_THAN         : /</
LESS_EQUAL        : /<=/
GREATER_EQUAL       : />=/
NOT_EQUAL         : /!=/
EQUAL_COMPARATION : /==/
EQUAL            : /=/
OR               : /\|/
AND              : /\&/

PLUS             : /\+/
MINUS            : /-/
ASTERISK         : /\*/

SLASH            : /\//

INT_WORD      : "int"
FLOAT_WORD     : "float"
BOOL_WORD      : "bool"
STRING_WORD    : "String"

IDENTIFIER: /[a-z_][a-zA-Z0-9_]*/
CONST_INT: /\d+/
CONST_FLOAT: /\d+(\.\d+)/
CONST_BOOL: "True" | "False"
CONST_STRING          : STRING

COMMENT : /#.*/

%ignore WHITESPACE
%ignore NEW_LINE
%import common.ESCAPED_STRING   -> STRING

// rules
start: programa

programa : START_PROGRAM NEW_LINE programa2 FINISH_PROGRAM
programa2 : some_vars* np_fin_igualacion (class*|COMMENT) (function*|COMMENT) start_main 
np_fin_igualacion : 
some_vars : vars np_limpiar_temps| asignacion np_limpiar_temps | COMMENT
np_limpiar_temps: 

start_main:  VOID MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS bloque np_fin_funcion np_limpiar_temps
np_fin_funcion:

vars    : VAR tipo IDENTIFIER EQUAL np_meter_igual expresion np_asiganar_valor  NEW_LINE                -> var_con_valor
        | VAR tipo IDENTIFIER                                                                           -> var_sin_valor
        | VAR tipo IDENTIFIER LEFT_BRACKET exp np_get_lim_s  RIGHT_BRACKET arreglo1 np_calcular_m np_arr_next_virtualadress NEW_LINE    -> var_arreglo
        | VAR IDENTIFIER IDENTIFIER                                                                     -> var_objeto

arreglo1 : LEFT_BRACKET np_add_dimension exp np_get_lim_s RIGHT_BRACKET arreglo2 |                                                                   -> arr_param
arreglo2 : LEFT_BRACKET np_add_dimension exp np_get_lim_s RIGHT_BRACKET|                                                                            -> arr_param2
np_asiganar_valor:
np_meter_igual:
np_add_dimension: 
np_arr_bracket1:
np_arr_dim:
np_arr_bracket2:
np_get_lim_s:
np_calcular_m:
np_arr_next_virtualadress:


asignacion      : IDENTIFIER EQUAL np_meter_igual expresion np_asiganar_valor NEW_LINE -> reasignar
                | IDENTIFIER DOT IDENTIFIER  EQUAL expresion NEW_LINE ->reasignar_obj
                | acceder_array EQUAL np_meter_igual expresion np_reasignar_arr -> reasignar_casilla_matriz
                
acceder_array  : IDENTIFIER  LEFT_BRACKET np_ver_dimension_access np_meterff expresion np_arr_ver_expresion RIGHT_BRACKET accesso_matriz*  np_fin_array np_sacarff  
accesso_matriz : np_actualizar_dim LEFT_BRACKET np_ver_dimension_access np_meterff expresion np_arr_ver_expresion RIGHT_BRACKET 

size_arr : IDENTIFIER COLON "size"

np_reasignar_arr:
np_actualizar_dim:
np_ver_dimension_access:
np_arr_ver_expresion:
np_fin_array:

bloque: LEFT_CURRLY_BRACES (b1?|function_return)+ RIGHT_CURRLY_BRACES
b1 : estatuto b1*

estatuto    : asignacion -> igualar
        | condicion  -> unif
        | escritura  -> unprint
        | ciclo      -> unwhile
        | vars       -> unavars
        | function   -> unafuncion
        | function_call -> unallamadafuncion
        | read_value    -> lectura
        | COMMENT    -> comentario

read_value: READ LEFT_PARENTHESIS IDENTIFIER RIGHT_PARENTHESIS

escritura : PRINT LEFT_PARENTHESIS expresion esc2* np_print RIGHT_PARENTHESIS NEW_LINE
np_print: 
esc2: COMMA np_print expresion 

condicion  : IF LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS np_falsoif bloque  condicionelse? np_finif
np_falsoif : 
np_finif   :

condicionelse : np_inicioelse ELSE bloque
np_inicioelse : 

ciclo : WHILE np_iniciowhile LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS np_truewhile bloque np_endwhile NEW_LINE
np_iniciowhile  : 
np_truewhile    : 
np_endwhile     :


expresion   : exp expresion1?
expresion1  : expresion_comparacion exp+ np_comparacion np_comparacion_andor
expresion_comparacion  : GREATER_THAN -> np_meter_mayorque
        | LESS_THAN             -> np_meter_menorque
        | EQUAL_COMPARATION     -> np_meter_igual_igual
        | NOT_EQUAL             -> np_meter_no_igual
        | GREATER_EQUAL         -> np_meter_mayor_igual
        | LESS_EQUAL            -> np_meter_menor_igual
        | OR                    -> np_meter_or
        | AND                   -> np_meter_and
np_comparacion: 
np_comparacion_andor: 

exp : termino np_sumarnumeros ex1? 
np_sumarnumeros: 
ex1 : exp_mas_menos exp 
exp_mas_menos   : PLUS -> np_metermas
                | MINUS -> np_metermenos               

termino : factor np_multiplicarnumeros t1?
np_multiplicarnumeros:
t1 : termino_por_entre termino 
termino_por_entre   : ASTERISK  -> np_meterpor
                    | SLASH     -> np_meterentre

factor  : factor_fondofalso 
        | factor_var
factor_fondofalso : LEFT_PARENTHESIS np_meterff expresion RIGHT_PARENTHESIS np_sacarff
np_meterff:
np_sacarff:

factor_var  : var_cte -> guardar_cte
        | IDENTIFIER DOT IDENTIFIER -> guardar_var_de_obj
        | acceder_array -> guardar_acceder_array
        | size_arr -> arr_size


class : LESS_THAN CLASS GREATER_THAN IDENTIFIER LEFT_CURRLY_BRACES np_inicio_vars_obj (vars|COMMENT)* np_fin_vars_obj (function|COMMENT)*  RIGHT_CURRLY_BRACES np_fin_clase->inicializar_clase
np_inicio_vars_obj:
np_fin_vars_obj:
np_fin_clase: 

function  : DEF (tipo|VOID) IDENTIFIER LEFT_PARENTHESIS function_param? RIGHT_PARENTHESIS LEFT_CURRLY_BRACES (estatuto* function_return?)+ RIGHT_CURRLY_BRACES np_fin_funcion
function_param : tipo IDENTIFIER is_array? function_params*
function_return : RETURN expresion np_guadalupe
                | RETURN LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS np_guadalupe

np_guadalupe: 
function_params : COMMA tipo IDENTIFIER is_array
is_array: LEFT_BRACKET CONST_INT RIGHT_BRACKET

function_call : IDENTIFIER fc_class? LEFT_PARENTHESIS fc_param? np_reset_count_params RIGHT_PARENTHESIS
fc_class : DOT IDENTIFIER 
fc_param : expresion np_check_param np_insert_param fc_params* 
np_check_param:
np_insert_param:
np_reset_count_params:
fc_params : COMMA expresion np_check_param np_insert_param

tipo: INT_WORD
| FLOAT_WORD 
| STRING_WORD
| BOOL_WORD

var_cte : IDENTIFIER    -> identificador
        | CONST_INT     -> entero
        | CONST_FLOAT   -> decimal
        | CONST_STRING  -> palabra
        | CONST_BOOL    -> booleano
        | function_call -> funcion